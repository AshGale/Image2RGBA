package main;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.text.NumberFormatter;
import javax.swing.text.View;

/**
 * 
 * @author Ash
 */

class Image2RGB {
	private JFrame jFrame;
	private JMenu jmenuFile, jmenuSettings, jmenuStitch;
	private JMenuBar jbar;
	private JMenuItem jOpen, jExit, jRGB, jScale, jGreyScale, jEdge, jviewOnFinshed, jreplaceWithLastJob, jstichMode;
	private JPanel jpanelImage,jpanelStich;
	private File imageFile = null;
	private JLabel jlabelImage;
	private BufferedImage image;
	private String path = System.getProperty("user.home") + "\\Pictures";
	private Font font = new Font("Arial", Font.PLAIN, 18);

	int stichWidth = 4;
	int stichHeight = 4;
	Boolean viewOnJobFinished = true;
	Boolean replaceWithLastJob = false;
	Boolean inStichMode = false;


	Image2RGB() {
		jFrame = new JFrame("Convert Image to RGB Files");
		jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		jFrame.setLocationByPlatform(true);
		jFrame.setLayout(new BorderLayout());
		jFrame.setMinimumSize(new Dimension(640, 640));

		jpanelImage = new JPanel();
		jpanelImage.setLayout(new BorderLayout());
		jlabelImage = new JLabel(" ");

		jpanelImage.add(jlabelImage, BorderLayout.CENTER);
		jpanelStich = new JPanel(new GridLayout(stichWidth,stichHeight));
		JScrollPane scrollFrame = new JScrollPane(jpanelStich);
		jFrame.add(jpanelImage);

		// Creating Menu
		jbar = new JMenuBar();
		jmenuFile = new JMenu("File");
		jmenuSettings = new JMenu("Settings");
		jmenuStitch = new JMenu("Stich");

		jmenuFile.setFont(font);
		jmenuSettings.setFont(font);
		jmenuStitch.setFont(font);

		jpanelStich.setAutoscrolls(true);
		// *****************************************************************************************

		// -----------------------------------------------------------------
		jstichMode = new JMenuItem("Load last processed image (" + inStichMode + ")");
		jstichMode.setFont(font);
		jstichMode.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				inStichMode = !inStichMode;
				jstichMode.setText("Load last processed image (" + inStichMode + ")");



				if(inStichMode){
					//scrollFrame.setPreferredSize(jFrame.getSize());
					//scrollFrame.set
					jFrame.remove(jpanelImage);
					jFrame.add(scrollFrame);

					if(jpanelStich.getHeight() == 0){
						for(int x = 0; x < stichWidth; x++) {
							for(int y = 0; y < stichHeight; y++) {
								JButton button = new JButton(x+", "+y);
								JLabel jlebel = new JLabel(x+", "+y);

								jlebel.setName(x+","+y);
								jlebel.addMouseListener(new MouseAdapter() {
									@Override
									public void mouseClicked(MouseEvent event) {
										System.out.println("Yay you clicked me: "+jlebel.getName());
										JFileChooser fileChooser = new JFileChooser(path);
										int result = fileChooser.showOpenDialog(null);

										if (result == JFileChooser.APPROVE_OPTION) {
											try {
												jlebel.setIcon(new ImageIcon(ImageIO.read(fileChooser.getSelectedFile())));
												jlebel.setText(null);
											} catch (Exception e) {
												JOptionPane.showMessageDialog(null, "Please ensure your selection is an image!");
												e.printStackTrace();
											}
										}
									}
								});
								jpanelStich.add(jlebel);


								//////
//								button.addActionListener(new ActionListener() {
//									public void actionPerformed(ActionEvent ae) {
//
//										JFileChooser fileChooser = new JFileChooser(path);
//										int result = fileChooser.showOpenDialog(null);
//
//										if (result == JFileChooser.APPROVE_OPTION) {
//											try {
//												button.setIcon(new ImageIcon(ImageIO.read(fileChooser.getSelectedFile())));
//
//											} catch (Exception e) {
//												JOptionPane.showMessageDialog(null, "Please ensure your selection is an image!");
//												e.printStackTrace();
//											}
//										}
//									}
//								});
//								jpanelStich.add(button);
							}
						}
					}
					else{
						System.out.println(jpanelStich);
						System.out.println(jpanelImage);

					}

					jFrame.pack();// this processes the render
				}else{
					jFrame.remove(scrollFrame);
					jFrame.add(jpanelImage);

					jFrame.pack();// this processes the render
				}
			}
		});

		// *****************************************************************************************
		jviewOnFinshed = new JMenuItem("View on Finished (" + viewOnJobFinished + ")");
		jviewOnFinshed.setFont(font);
		jviewOnFinshed.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				viewOnJobFinished = !viewOnJobFinished;
				jviewOnFinshed.setText("View on Finished (" + viewOnJobFinished + ")");
			}
		});

		// -----------------------------------------------------------------
		jreplaceWithLastJob = new JMenuItem("Load last processed image (" + replaceWithLastJob + ")");
		jreplaceWithLastJob.setFont(font);
		jreplaceWithLastJob.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				replaceWithLastJob = !replaceWithLastJob;
				jreplaceWithLastJob.setText("Load last processed image (" + replaceWithLastJob + ")");
			}
		});

		// *****************************************************************************************

		jOpen = new JMenuItem("Open");
		jOpen.setFont(font);
		jOpen.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				
				//find check if called from other actionPerformed even.
				//	fix loop until select valid image file
				//if(ae.getSource().equals(jEdge))
//				System.out.println("source is:"+ae.getSource().getClass());
//				System.out.println("source is:"+ae.getActionCommand());
//				System.out.println("source is:"+ae.getID());
//				System.out.println("source is:"+ae.INPUT_METHOD_EVENT_MASK);
				
				JFileChooser fileChooser = new JFileChooser(path);
				int result = fileChooser.showOpenDialog(null);

				// Ensure File structure set up 
				setupfileStructure();

				if (result == JFileChooser.APPROVE_OPTION) {
					
					imageFile = fileChooser.getSelectedFile();
					try {
						jlabelImage.setIcon(new ImageIcon(ImageIO.read(imageFile)));
						image = ImageIO.read(imageFile);
						jFrame.pack();
					} catch (Exception e) {
						JOptionPane.showMessageDialog(null, "Please ensure your selection is an image!");
						e.printStackTrace();
					}
				}
			}
		});

		// -----------------------------------------------------------------
		jRGB = new JMenuItem("RGB");
		jRGB.setFont(font);
		jRGB.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {

				// If Image selected already
				if (image == null) {
					jOpen.doClick();
					jRGB.doClick();
				} else {

					// set up output files
					File redImg = generateFile("Rgb", "red");
					File greenImg = generateFile("Rgb", "green");
					File blueImg = generateFile("Rgb", "blue");

					// get RGB from image
					BufferedImage buffImage = getMainImageBuffered();

					int imageHeight = buffImage.getHeight();
					int imageWidth = buffImage.getWidth();

					BufferedImage buffRed = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_ARGB);
					BufferedImage buffGreen = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_ARGB);
					BufferedImage buffBlue = new BufferedImage(imageWidth, imageHeight, BufferedImage.TYPE_INT_ARGB);

					WritableRaster imageRaster = buffImage.getRaster();
					int[] pixelRGBA = new int[4];

					for (int i = 0; i < imageHeight; i++) {
						for (int j = 0; j < imageWidth; j++) {

							imageRaster.getPixel(j, i, pixelRGBA);

							// System.out.println(j+","+i+" =>"+pixelRGBA[0]+" "+pixelRGBA[1]+"
							// "+pixelRGBA[2]+" "+pixelRGBA[3]);

							if (pixelRGBA[3] == 0 && pixelRGBA[0] == 0 && pixelRGBA[1] == 0 && pixelRGBA[2] == 0) {

								// set pixel at location to empty
								buffRed.setRGB(j, i, getIntFromColor(0, 0, 0, 0));
								buffGreen.setRGB(j, i, getIntFromColor(0, 0, 0, 0));
								buffBlue.setRGB(j, i, getIntFromColor(0, 0, 0, 0));
							} else if (pixelRGBA[3] == 0) {// check if file supports alpha

								buffRed.setRGB(j, i, getIntFromColor(pixelRGBA[0], 0, 0, 255));
								buffGreen.setRGB(j, i, getIntFromColor(0, pixelRGBA[1], 0, 255));
								buffBlue.setRGB(j, i, getIntFromColor(0, 0, pixelRGBA[2], 255));
							} else {

								buffRed.setRGB(j, i, getIntFromColor(pixelRGBA[0], 0, 0, pixelRGBA[3]));
								buffGreen.setRGB(j, i, getIntFromColor(0, pixelRGBA[1], 0, pixelRGBA[3]));
								buffBlue.setRGB(j, i, getIntFromColor(0, 0, pixelRGBA[2], pixelRGBA[3]));
							}
						}
					} // end nested loop

					// Save Images to path of selected file
					savImageFile(buffRed, "png", redImg);
					savImageFile(buffGreen, "png", greenImg);
					savImageFile(buffBlue, "png", blueImg);

					JOptionPane.showMessageDialog(null, "All Done");

					openNewFileLocation("Rgb");

				}
			}// end action performed
		});
		// -----------------------------------------------------------------

		jScale = new JMenuItem("Scale");
		jScale.setFont(font);
		jScale.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {

				// If Image selected already
				if (image == null) {
					jOpen.doClick();
					jScale.doClick();
				} else {

					int outputWidth = 0;
					int outputHeight = 0;

					if (outputHeight == 0 || outputWidth == 0) {

						// Get Desired Width and Height
						NumberFormat format = NumberFormat.getInstance();
						format.setGroupingUsed(false);
						NumberFormatter formatter = new NumberFormatter(format);
						formatter.setValueClass(Integer.class);
						formatter.setMaximum(65535);
						formatter.setAllowsInvalid(false);
						formatter.setCommitsOnValidEdit(true);						

						JTextField newWidth = new JFormattedTextField(formatter);
						JTextField newHeight = new JFormattedTextField(formatter);
						
						newWidth.setText(""+image.getWidth());
						newHeight.setText(""+image.getHeight());
						
						//newWidth.requestFocusInWindow();
						
						final JComponent[] inputs = new JComponent[] { 
								new JLabel("Please enter in number format!"),
								new JLabel("new Width"), newWidth, new JLabel("new Height"), newHeight,
								new JLabel("current size: " + image.getWidth() + " x " + image.getHeight()) 
						};
						
						int result = JOptionPane.showConfirmDialog(null, inputs, "Output Image size",
								JOptionPane.PLAIN_MESSAGE);
						
						if (result == JOptionPane.OK_OPTION) {

							outputWidth = Integer.parseInt(newWidth.getText());// ensured number format with formatter
							outputHeight = Integer.parseInt(newHeight.getText());// ensured number format with formatter
						} else {
							System.out.println("User canceled / closed the dialog, result = " + result);
						}

					} // end if output dimensions 0

					// Make file and determine file name
					File outputfile = generateFile("Scaled", "scaled_" + outputWidth + "x" + outputHeight);

					// convert image to scaled version
					BufferedImage buffInputImage = getMainImageBuffered();

					BufferedImage buffOutputImage = new BufferedImage(outputWidth, outputHeight,
							BufferedImage.TYPE_INT_ARGB);

					// scales the input image to the output image
					Graphics2D g2d = buffOutputImage.createGraphics();
					g2d.drawImage(buffInputImage, 0, 0, outputWidth, outputHeight, null);
					g2d.dispose();

					savImageFile(buffOutputImage, "png", outputfile);

					JOptionPane.showMessageDialog(null, "All Done");

					openNewFileLocation("Scaled");

				} // end if image null
			}
		});
		// -----------------------------------------------------------------

		jGreyScale = new JMenuItem("Grey Scale");
		jGreyScale.setFont(font);
		jGreyScale.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {

				// If Image selected already
				if (image == null) {
					jOpen.doClick();
					jGreyScale.doClick();
				} else {

					File greyScaleImage = generateFile("Grey_Scale", "Greyscale");

					// convert image to Greyscale version
					BufferedImage buffInputImage = getMainImageBuffered();

					BufferedImage buffOutputImage = new BufferedImage(image.getWidth(), image.getHeight(),
							BufferedImage.TYPE_BYTE_GRAY);

					Graphics g = buffOutputImage.getGraphics();
					g.drawImage(buffInputImage, 0, 0, null);
					g.dispose();

					savImageFile(buffOutputImage, "png", greyScaleImage);

					JOptionPane.showMessageDialog(null, "All Done");

					openNewFileLocation("Grey_Scale");
				}
			}
		});
		// -----------------------------------------------------------------

		jEdge = new JMenuItem("Edge Detection");
		jEdge.setFont(font);
		jEdge.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {

				// If Image selected already
				if (image == null) {
					jOpen.doClick();
					jEdge.doClick();
				} else {

					File edgeImage = generateFile("Edges", "Edges");

					// convert image to Edges version
					BufferedImage inputBuffImage = getMainImageBuffered();

					int[][] filter1 = { { -1, 0, 1 },
										{ -2, 0, 2 },
										{ -1, 0, 1 } };

					int[][] filter2 = { { 1, 2, 1 },
										{ 0, 0, 0 },
										{ -1, -2, -1 } };

					int width = inputBuffImage.getWidth();
					int height = inputBuffImage.getHeight();
					BufferedImage outBuffImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);

					WritableRaster imageRaster = inputBuffImage.getRaster();
					int[] pixelRGBA = new int[4];

					for (int y = 1; y < height - 1; y++) {
						for (int x = 1; x < width - 1; x++) {

							// get 3-by-3 array of colors in neighborhood
							int[][] gray = new int[3][3];
							for (int i = 0; i < 3; i++) {
								for (int j = 0; j < 3; j++) {

									// Magic
									imageRaster.getPixel(x - 1 + i, y - 1 + j, pixelRGBA);
									int r = pixelRGBA[0];
									int g = pixelRGBA[1];
									int b = pixelRGBA[2];

									// int lumSum= (int) (.299*r + .587*g + .114*b);
									int lumSum = (int) (0.2126f * r + 0.7152f * g + 0.0722f * b);// luminosity method

									gray[i][j] = (int) (Math.round(lumSum));
								}
							}

							// apply filter
							int gray1 = 0, gray2 = 0;
							for (int i = 0; i < 3; i++) {
								for (int j = 0; j < 3; j++) {
									gray1 += gray[i][j] * filter1[i][j];
									gray2 += gray[i][j] * filter2[i][j];
								}
							}

							int magnitude = 255 - truncate((int) Math.sqrt(gray1 * gray1 + gray2 * gray2));// ensure
																											// 0-255

							outBuffImage.setRGB(x, y, getIntFromColor(magnitude, magnitude, magnitude, 255));
						}
					}

					savImageFile(outBuffImage, "png", edgeImage);

					JOptionPane.showMessageDialog(null, "All Done");

					openNewFileLocation("Edges");
				}

			}
		});

		// -----------------------------------------------------------------

		jExit = new JMenuItem("Exit");
		jExit.setFont(font);
		jExit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				System.exit(0);
			}
		});

		// *****************************************************************************************



		jmenuFile.add(jOpen);
		jmenuFile.add(jRGB);
		jmenuFile.add(jGreyScale);
		jmenuFile.add(jEdge);
		jmenuFile.add(jScale);
		jmenuFile.add(jExit);
		jmenuSettings.add(jreplaceWithLastJob);
		jmenuSettings.add(jviewOnFinshed);
		jmenuStitch.add(jstichMode);
		jbar.add(jmenuFile);
		jbar.add(jmenuSettings);
		jbar.add(jmenuStitch);
		jFrame.setJMenuBar(jbar);

		jFrame.pack();// this processes the render
		jFrame.setResizable(true);
		jFrame.setVisible(true);
	}// End Image2RGB

	private static int truncate(int a) {
		if (a < 0)
			return 0;
		else if (a > 255)
			return 255;
		else
			return a;
	}

	private void openNewFileLocation(String fileFolderLocation) {

		if (viewOnJobFinished)
			try {
				Runtime.getRuntime().exec("explorer " + path + "\\ImageProcessing\\" + fileFolderLocation);
			} catch (IOException e) {
				e.printStackTrace();
			}

	}

	private void savImageFile(BufferedImage bufferReader, String fileFormat, File file) {
		try {
			ImageIO.write(bufferReader, "png", file);
		} catch (IOException e) {

			JOptionPane.showMessageDialog(null, "Failed to create RGB files");
			e.printStackTrace();
		}
		if (replaceWithLastJob) {
			jlabelImage.setIcon(new ImageIcon(bufferReader));
			imageFile = file;
			image = bufferReader;
			jFrame.pack();
		}

	}

	private BufferedImage getMainImageBuffered() {

		BufferedImage buffImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_INT_ARGB);

		try {
			buffImage = ImageIO.read(imageFile);
		} catch (IOException e) {
		}
		return buffImage;
	}

	private File generateFile(String folderPrefix, String fileName) {
		String name = imageFile.getName();
		if (name.contains("."))
			name = name.substring(0, name.indexOf("."));
		name += "_";

		return new File(path + "\\ImageProcessing\\" + folderPrefix + "\\" + name + fileName + ".png");

	}

	private void setupfileStructure() {

		File imageProcessing = new File(path + "\\ImageProcessing");
		File rgb = new File(path + "\\ImageProcessing\\Rgb");
		File scaled = new File(path + "\\ImageProcessing\\Scaled");
		File greyScale = new File(path + "\\ImageProcessing\\Grey_Scale");
		File edges = new File(path + "\\ImageProcessing\\Edges");

		if (!imageProcessing.exists()) {
			imageProcessing.mkdir();
		}
		if (!rgb.exists()) {
			rgb.mkdir();
		}
		if (!greyScale.exists()) {
			greyScale.mkdir();
		}
		if (!scaled.exists()) {
			scaled.mkdir();
		}
		if (!edges.exists()) {
			edges.mkdir();
		}

	}

	private int getIntFromColor(int R, int G, int B, int A) {
		// System.out.print(A + " " + R + " " + G + " " + B + " = " );
		A = (A << 24) & 0xFF000000;
		R = (R << 16) & 0x00FF0000;
		G = (G << 8) & 0x0000FF00;
		B = B & 0x000000FF;
		// System.out.println((A | R | G | B));
		return A | R | G | B;
	}

	// Main Function
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				new Image2RGB();
			}
		});
	}
}